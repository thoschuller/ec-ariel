import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod

class teampursuit(ABC, metaclass=abc.ABCMeta):
    friction_coefficient: float
    drafting_coefficients: Incomplete
    gravitational_acceleration: float
    time_step: float
    transition_time: float
    relative_humidity: float
    temperature: float
    barometric_pressure: float
    air_density: Incomplete
    team: Incomplete
    def __init__(self) -> None: ...
    def set_temperature(self, temperature) -> None: ...
    def set_barometric_pressure(self, barometric_pressure) -> None: ...
    def set_relative_humidity(self, relative_humidity) -> None: ...
    def set_height(self, cyclist_id, height) -> None: ...
    def set_weight(self, cyclist_id, weight) -> None: ...
    def set_mean_maximum_power(self, cyclist_id, mean_maximum_power) -> None: ...
    def get_temperature(self): ...
    def get_barometric_pressure(self): ...
    def get_relative_humidity(self): ...
    def get_height(self, cyclist_id): ...
    def get_weight(self, cyclist_id): ...
    def get_mean_maximum_power(self, cyclist_id): ...
    @abstractmethod
    def simulate(self, transition_strategy, pacing_strategy): ...
    def update_air_density(self) -> None: ...
    def cyclists_remaining(self): ...
    def leader(self): ...
    def transition(self) -> None: ...
