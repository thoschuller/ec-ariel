from _typeshed import Incomplete

num_cores: Incomplete
default_budget: int
default_steps: int
default_order: int
default_stepsize: int
methods: Incomplete
metrics: Incomplete

def normalize(x): ...
def convo(x, k): ...
def convo_mult(x, k): ...
def pure_random(n, shape, conv=None): ...
def antithetic_pm(n, shape, conv=None): ...
def antithetic_order(n, shape, axis: int = -1, also_sym: bool = False, conv=None): ...
def antithetic_order_and_sign(n, shape, axis: int = -1, conv=None): ...
def manual_avg_pool3d(arr, kernel_size): ...
def max_pooling(n, shape, budget=..., conv=None): ...
def max_without_pooling(n, shape, budget=..., conv=[1, 1]): ...
def max_small_pooling(n, shape, budget=..., conv=[8, 8]): ...
def greedy_dispersion(n, shape, budget=..., conv=None): ...
def dispersion(n, shape, budget=..., conv=None): ...
def dispersion_with_conv(n, shape, budget=...): ...
def greedy_dispersion_with_conv(n, shape, budget=...): ...
def dispersion_with_big_conv(n, shape, budget=...): ...
def greedy_dispersion_with_big_conv(n, shape, budget=...): ...
def dispersion_with_mini_conv(n, shape, budget=...): ...
def greedy_dispersion_with_mini_conv(n, shape, budget=...): ...
def Riesz_blurred_gradient(n, shape, budget=..., order=..., step_size=..., conv=None): ...
def Riesz_blursum_gradient(n, shape, budget=..., order=..., step_size=..., conv=None): ...
def Riesz_noblur_gradient(n, shape, budget=..., order=..., step_size=..., conv=None): ...
def Riesz_noblur_lowconv_loworder(n, shape, budget=...): ...
def Riesz_noblur_lowconv_midorder(n, shape, budget=...): ...
def Riesz_noblur_lowconv_highorder(n, shape, budget=...): ...
def Riesz_blursum_lowconv_hugeorder(n, shape, budget=...): ...
def Riesz_blursum_medconv_hugeorder(n, shape, budget=...): ...
def Riesz_blursum_highconv_hugeorder(n, shape, budget=...): ...
def Riesz_blursum_lowconv_tinyorder(n, shape, budget=...): ...
def Riesz_blursum_medconv_tinyorder(n, shape, budget=...): ...
def Riesz_blursum_highconv_tinyorder(n, shape, budget=...): ...
def Riesz_blurred_lowconv_hugeorder(n, shape, budget=...): ...
def Riesz_blurred_medconv_hugeorder(n, shape, budget=...): ...
def Riesz_blurred_highconv_hugeorder(n, shape, budget=...): ...
def Riesz_blurred_lowconv_tinyorder(n, shape, budget=...): ...
def Riesz_blurred_medconv_tinyorder(n, shape, budget=...): ...
def Riesz_blurred_highconv_tinyorder(n, shape, budget=...): ...
def Riesz_blursum_bigconv_loworder(n, shape, budget=...): ...
def Riesz_blursum_bigconv_midorder(n, shape, budget=...): ...
def Riesz_blursum_bigconv_highorder(n, shape, budget=...): ...
def Riesz_blursum_medconv_loworder(n, shape, budget=...): ...
def Riesz_blursum_medconv_midorder(n, shape, budget=...): ...
def Riesz_blursum_medconv_highorder(n, shape, budget=...): ...
def Riesz_blursum_lowconv_loworder(n, shape, budget=...): ...
def Riesz_blursum_lowconv_midorder(n, shape, budget=...): ...
def Riesz_blursum_lowconv_highorder(n, shape, budget=...): ...
def Riesz_blurred_bigconv_loworder(n, shape, budget=...): ...
def Riesz_blurred_bigconv_midorder(n, shape, budget=...): ...
def Riesz_blurred_bigconv_highorder(n, shape, budget=...): ...
def Riesz_blurred_medconv_loworder(n, shape, budget=...): ...
def Riesz_blurred_medconv_midorder(n, shape, budget=...): ...
def Riesz_blurred_medconv_highorder(n, shape, budget=...): ...
def Riesz_blurred_lowconv_loworder(n, shape, budget=...): ...
def Riesz_blurred_lowconv_midorder(n, shape, budget=...): ...
def Riesz_blurred_lowconv_highorder(n, shape, budget=...): ...
def block_symmetry(n, shape, num_blocks=None): ...
def big_block_symmetry(n, shape): ...
def covering(n, shape, budget=..., conv=None): ...
def covering_conv(n, shape, budget=...): ...
def covering_mini_conv(n, shape, budget=...): ...
def get_class(x, num_blocks, just_max): ...
def jittered(n, shape, num_blocks=None, just_max: bool = False): ...
def reduced_jittered(n, shape): ...
def covering_big_conv(n, shape, budget=...): ...
def lhs(n, shape): ...
def metric_half(x, budget=..., conv=None): ...
def metric_half_conv(x, budget=...): ...
def metric_cap(x, budget=..., conv=None): ...
def metric_cap_conv(x, budget=...): ...
def metric_pack_absavg(x, budget=..., conv=None): ...
def metric_pack_absavg_conv(x, budget=...): ...
def metric_riesz_avg(x, budget=..., conv=None, r: float = 1.0): ...
def metric_riesz_avg2(x, budget=..., conv=None, r: float = 2.0): ...
def metric_riesz_avg05(x, budget=..., conv=None, r: float = 0.5): ...
def metric_riesz_avg_conv(x, budget=..., conv=[8, 8], r: float = 1.0): ...
def metric_riesz_avg_conv2(x, budget=..., conv=[8, 8], r: float = 2.0): ...
def metric_riesz_avg_conv05(x, budget=..., conv=[8, 8], r: float = 0.5): ...
def metric_pack_avg(x, budget=..., conv=None): ...
def metric_pack_avg_conv(x, budget=...): ...
def metric_pack(x, budget=..., conv=None): ...
def metric_pack_conv(x, budget=...): ...
def metric_pack_big_conv(x, budget=...): ...

list_of_methods: Incomplete
list_metrics: Incomplete

def rs(n, shape, budget=..., k: str = 'metric_half', ngtool=None): ...
def rs_mhc(n, shape, budget=...): ...
def rs_cap(n, shape, budget=...): ...
def rs_cc(n, shape, budget=...): ...
def rs_pack(n, shape, budget=...): ...
def rs_ra(n, shape, budget=...): ...
def rs_ra2(n, shape, budget=...): ...
def rs_ra05(n, shape, budget=...): ...
def rs_rac(n, shape, budget=...): ...
def rs_rac2(n, shape, budget=...): ...
def rs_rac05(n, shape, budget=...): ...
def rs_pa(n, shape, budget=...): ...
def rs_pc(n, shape, budget=...): ...
def rs_pac(n, shape, budget=...): ...
def rs_all(n, shape, budget=...): ...
def ng_TwoPointsDE(n, shape, budget=...): ...
def ng_DE(n, shape, budget=...): ...
def ng_PSO(n, shape, budget=...): ...
def ng_OnePlusOne(n, shape, budget=...): ...
def ng_DiagonalCMA(n, shape, budget=...): ...

data: Incomplete

def do_plot(tit, values): ...
def heatmap(y, x, table, name) -> None: ...
def parallel_create_statistics(n, shape, list_of_methods, list_of_metrics, num: int = 1): ...
def bigcheck() -> None: ...
def get_a_point_set(n, shape, method=None): ...
def quasi_randomize(pointset, method=None): ...
