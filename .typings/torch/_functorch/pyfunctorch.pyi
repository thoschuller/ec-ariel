import abc
import contextlib
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from collections.abc import Generator
from functools import cached_property as cached_property
from torch._C._functorch import CFunctionalizeInterpreterPtr as CFunctionalizeInterpreterPtr, CGradInterpreterPtr as CGradInterpreterPtr, CInterpreter as CInterpreter, CJvpInterpreterPtr as CJvpInterpreterPtr, CVmapInterpreterPtr as CVmapInterpreterPtr, RandomnessType as RandomnessType, TransformType as TransformType, pop_dynamic_layer_stack as pop_dynamic_layer_stack, push_dynamic_layer_stack as push_dynamic_layer_stack
from torch.autograd.forward_ad import _set_fwd_grad_enabled as _set_fwd_grad_enabled
from typing import Any

class FuncTorchInterpreter(ABC, metaclass=abc.ABCMeta):
    _cptr: Incomplete
    def __init__(self, cptr: Any) -> None: ...
    @abstractmethod
    def process(self, op, args, kwargs): ...
    def lower(self): ...
    def level(self): ...
    def key(self): ...
    def get_state(self) -> None: ...
    def check_state(self, state): ...
    def __getstate__(self): ...

@contextlib.contextmanager
def temporarily_pop_interpreter_stack() -> Generator[None]: ...
@contextlib.contextmanager
def temporarily_clear_interpreter_stack() -> Generator[Incomplete]: ...
@contextlib.contextmanager
def temporarily_restore_interpreter_stack(stack) -> Generator[None]: ...

class VmapInterpreter(FuncTorchInterpreter):
    _cdata: Incomplete
    def __init__(self, cdata: CInterpreter) -> None: ...
    @cached_property
    def _cptr(self): ...
    def process(self, op, args, kwargs): ...
    def batch_size(self): ...
    def randomness(self): ...
    def get_state(self): ...

@contextlib.contextmanager
def nested(*contexts) -> Generator[Incomplete]: ...

class GradInterpreter(FuncTorchInterpreter):
    _cdata: Incomplete
    def __init__(self, cdata: CInterpreter) -> None: ...
    @cached_property
    def _cptr(self): ...
    def lift(self, args, kwargs): ...
    def process(self, op, args, kwargs): ...
    def lower(self): ...
    def prev_grad_mode(self): ...
    def get_state(self): ...

class JvpInterpreter(FuncTorchInterpreter):
    _cdata: Incomplete
    def __init__(self, cdata: CInterpreter) -> None: ...
    @cached_property
    def _cptr(self): ...
    def lift(self, args, kwargs): ...
    def process(self, op, args, kwargs): ...
    def lower(self): ...
    def prev_fwd_grad_mode(self): ...
    def get_state(self): ...

class FunctionalizeInterpreter(FuncTorchInterpreter):
    _cdata: Incomplete
    def __init__(self, cdata: CInterpreter) -> None: ...
    @cached_property
    def _cptr(self): ...
    def process(self, op, args, kwargs): ...
    def functionalize_add_back_views(self): ...
    def get_state(self): ...

def coerce_cinterpreter(cinterpreter: CInterpreter) -> FuncTorchInterpreter: ...
def retrieve_current_functorch_interpreter() -> FuncTorchInterpreter: ...
def retrieve_all_functorch_interpreters() -> list[FuncTorchInterpreter]: ...
def compare_functorch_state(states: list[tuple[Any, ...]]) -> bool: ...
def dispatch_functorch(op, args, kwargs): ...
