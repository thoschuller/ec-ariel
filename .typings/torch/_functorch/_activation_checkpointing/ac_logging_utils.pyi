import logging
from torch._logging import trace_structured as trace_structured
from torch.fx import Graph as Graph, Node as Node
from typing import Any

log: logging.Logger

def create_joint_graph_node_information(joint_graph: Graph, recomputable_node_info: dict[str, int]) -> dict[str, Any]: ...
def create_joint_graph_edges(joint_graph: Graph) -> list[tuple[str, str]]: ...
def create_activation_checkpointing_logging_structure_payload(joint_graph: Graph, joint_graph_node_information: dict[str, Any], joint_graph_edges: list[tuple[str, str]], all_recomputable_banned_nodes: list[Node], expected_runtime: float, saved_node_idxs: list[int], recomputable_node_idxs: list[int], memories_banned_nodes: list[float], runtimes_banned_nodes: list[float], min_cut_saved_values: list[Node]) -> dict[str, Any]: ...
def create_structured_trace_for_min_cut_info(joint_graph: Graph, all_recomputable_banned_nodes: list[Node], saved_node_idxs: list[int], recomputable_node_idxs: list[int], expected_runtime: float, memories_banned_nodes: list[float], runtimes_banned_nodes: list[float], min_cut_saved_values: list[Node]) -> None: ...
