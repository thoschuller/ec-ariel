import ast
from ._importlib import _resolve_name as _resolve_name
from _typeshed import Incomplete

class _ExtractModuleReferences(ast.NodeVisitor):
    """
    Extract the list of global variables a block of code will read and write
    """
    @classmethod
    def run(cls, src: str, package: str) -> list[tuple[str, str | None]]: ...
    package: Incomplete
    references: Incomplete
    def __init__(self, package) -> None: ...
    def _absmodule(self, module_name: str, level: int) -> str: ...
    def visit_Import(self, node) -> None: ...
    def visit_ImportFrom(self, node) -> None: ...
    def _grab_node_int(self, node): ...
    def _grab_node_str(self, node): ...
    def visit_Call(self, node) -> None: ...

find_files_source_depends_on: Incomplete
