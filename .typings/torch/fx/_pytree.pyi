from torch.utils._pytree import PyTree as PyTree, TreeSpec as TreeSpec, tree_flatten as tree_flatten
from typing import Any, Callable, TypeVar
from typing_extensions import NamedTuple

FlattenFuncSpec = Callable[[PyTree, TreeSpec], list]
FlattenFuncExactMatchSpec = Callable[[PyTree, TreeSpec], bool]
SUPPORTED_NODES: dict[type[Any], FlattenFuncSpec]
SUPPORTED_NODES_EXACT_MATCH: dict[type[Any], FlattenFuncExactMatchSpec | None]
_T = TypeVar('_T')
_K = TypeVar('_K')
_V = TypeVar('_V')

def register_pytree_flatten_spec(cls, flatten_fn_spec: FlattenFuncSpec, flatten_fn_exact_match_spec: FlattenFuncExactMatchSpec | None = None) -> None: ...
def _deregister_pytree_flatten_spec(cls) -> None: ...
def tree_flatten_spec(pytree: PyTree, spec: TreeSpec) -> list[Any]: ...
def _dict_flatten_spec(d: dict[_K, _V], spec: TreeSpec) -> list[_V]: ...
def _list_flatten_spec(d: list[_T], spec: TreeSpec) -> list[_T]: ...
def _tuple_flatten_spec(d: tuple[_T, ...], spec: TreeSpec) -> list[_T]: ...
def _namedtuple_flatten_spec(d: NamedTuple, spec: TreeSpec) -> list[Any]: ...
def _dict_flatten_spec_exact_match(d: dict[_K, _V], spec: TreeSpec) -> bool: ...
def _list_flatten_spec_exact_match(d: list[_T], spec: TreeSpec) -> bool: ...
def _tuple_flatten_spec_exact_match(d: tuple[_T, ...], spec: TreeSpec) -> bool: ...
def _namedtuple_flatten_spec_exact_match(d: NamedTuple, spec: TreeSpec) -> bool: ...
