from typing import *
from _typeshed import Incomplete
from typing import Any

class ConstantIntNode:
    val: Incomplete
    def __init__(self, val: int) -> None: ...
    def is_constant(self) -> bool: ...
    def maybe_as_int(self) -> int: ...
    def is_int(self) -> bool: ...
    def is_float(self) -> bool: ...
    def is_bool(self) -> bool: ...
    def is_nested_int(self) -> bool: ...
    def clone(self) -> ConstantIntNode: ...
    def _str(self) -> str: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def _graph_repr(self) -> str: ...
    def mul(self, other: Any) -> Any: ...
    def eq(self, other: Any) -> Any: ...
    def ne(self, other: Any) -> Any: ...
    def gt(self, other: Any) -> Any: ...
    def lt(self, other: Any) -> Any: ...
    def le(self, other: Any) -> Any: ...
    def ge(self, other: Any) -> Any: ...
    def is_symbolic(self) -> bool: ...
    def constant_int(self) -> int: ...
