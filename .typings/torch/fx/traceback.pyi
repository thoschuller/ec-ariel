from .graph import Graph
from .node import Node
from _typeshed import Incomplete
from collections.abc import Generator
from contextlib import contextmanager
from enum import Enum
from typing import Any

__all__ = ['preserve_node_meta', 'has_preserved_node_meta', 'set_stack_trace', 'set_grad_fn_seq_nr', 'reset_grad_fn_seq_nr', 'format_stack', 'set_current_meta', 'get_current_meta', 'NodeSource', 'NodeSourceAction', 'get_graph_provenance_json']

class NodeSourceAction(Enum):
    CREATE = 'create'
    REPLACE = 'replace'

class NodeSource:
    '''
    NodeSource is a data structure that contains the provenance information of a node.
    If node `a` is created from node `b`, then `a.meta["from_node"]` may contain NodeSource(b).
    '''
    class NodeInfo:
        name: Incomplete
        target: Incomplete
        graph_id: Incomplete
        def __init__(self, name: str, target: str, graph_id: int) -> None: ...
    pass_name: str
    action: list['NodeSourceAction']
    from_node: list['NodeSource']
    node_info: NodeInfo | None
    def __init__(self, node: Node | None, pass_name: str = '', action: NodeSourceAction | list['NodeSourceAction'] | None = None) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def target(self) -> str: ...
    @property
    def graph_id(self) -> int: ...
    def __repr__(self) -> str: ...
    def _get_action_string(self): ...
    def print_readable(self, indent: int = 0): ...
    def to_dict(self) -> dict: ...

@contextmanager
def preserve_node_meta(enable: bool = True) -> Generator[None]: ...
def set_stack_trace(stack: list[str]): ...
def set_grad_fn_seq_nr(seq_nr) -> None: ...
def reset_grad_fn_seq_nr() -> None: ...
def format_stack() -> list[str]: ...
def has_preserved_node_meta() -> bool: ...
@contextmanager
def set_current_meta(node, pass_name: str = '') -> Generator[None]: ...
def get_current_meta() -> dict[str, Any]: ...
def get_graph_provenance_json(graph: Graph) -> dict[str, Any]:
    """
    Given an fx.Graph, return a json that contains the provenance information of each node.
    """
