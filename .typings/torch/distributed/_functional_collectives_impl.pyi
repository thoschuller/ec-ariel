import torch

def _broadcast(input, src, tag, ranks, group_size): ...
def _all_reduce(input, reduce_op, tag, ranks, group_size): ...
def _all_reduce_coalesced(inputs, reduce_op, tag, ranks, group_size): ...
def _all_gather_into_tensor(input, tag, ranks, group_size): ...
def _all_gather_into_tensor_coalesced(input, tag, ranks, group_size): ...
def _reduce_scatter_tensor(input: torch.Tensor, reduce_op: str, tag: str, ranks: list[int], group_size: int): ...
def _reduce_scatter_tensor_coalesced(inputs: list[torch.Tensor], reduce_op: str, tag: str, ranks: list[int], group_size: int): ...
def _all_to_all_single(input: torch.Tensor, output_split_sizes: list[int] | None, input_split_sizes: list[int] | None, tag: str, ranks: list[int], group_size: int): ...
def _wait_tensor(tensor: torch.Tensor) -> torch.Tensor: ...
