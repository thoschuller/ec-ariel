import torch
from _typeshed import Incomplete

aten: Incomplete

def _requires_data_exchange(padding): ...
def _is_supported(input_size, kernel_size, stride, padding, dilation): ...
def _ring_send_recv_construct(in_tensor, d1, d2, left, right, rank, size): ...
def _ring_send_recv_aggregate(grad_in_tensor, d1, d2, left, right, rank, size) -> None: ...
def tp_convolution(op_call: torch._ops.OpOverload, local_tensor_args: tuple[object, ...], local_tensor_kwargs: dict[str, object]) -> object: ...
def tp_convolution_backward(op_call: torch._ops.OpOverload, local_tensor_args: tuple[object, ...], local_tensor_kwargs: dict[str, object]) -> object: ...
def convolution_handler(op_call: torch._ops.OpOverload, args: tuple[object, ...], kwargs: dict[str, object]) -> object: ...
def convolution_backward_handler(op_call: torch._ops.OpOverload, args: tuple[object, ...], kwargs: dict[str, object]) -> object: ...
