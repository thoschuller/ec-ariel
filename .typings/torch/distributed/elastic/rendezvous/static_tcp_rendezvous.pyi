from _typeshed import Incomplete
from torch.distributed import Store
from torch.distributed.elastic.rendezvous import RendezvousHandler, RendezvousInfo, RendezvousParameters

__all__ = ['StaticTCPRendezvous', 'create_rdzv_handler']

class StaticTCPRendezvous(RendezvousHandler):
    """
    Static rendezvous that is a wrapper around the TCPStore.

    Creates TCPStore based on the input parameters with the
    listener on the agent with group_rank=0
    """
    master_addr: Incomplete
    master_port: Incomplete
    rank: Incomplete
    world_size: Incomplete
    run_id: Incomplete
    timeout: Incomplete
    _store: Store | None
    def __init__(self, master_addr: str, master_port: int, rank: int, world_size: int, run_id: str, timeout: int) -> None: ...
    def get_backend(self) -> str: ...
    @property
    def use_agent_store(self) -> bool: ...
    def next_rendezvous(self) -> RendezvousInfo: ...
    def is_closed(self): ...
    def set_closed(self) -> None: ...
    def num_nodes_waiting(self): ...
    def get_run_id(self) -> str: ...
    def shutdown(self) -> bool: ...

def create_rdzv_handler(params: RendezvousParameters) -> RendezvousHandler: ...
