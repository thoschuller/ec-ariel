from .core import is_masked_tensor as is_masked_tensor
from .creation import as_masked_tensor as as_masked_tensor, masked_tensor as masked_tensor
from _typeshed import Incomplete

__all__: Incomplete

def _masked_all_all(data, mask=None): ...
def _masked_all_dim(data, dim, keepdim: bool = False, mask=None): ...
def _masked_all(*args, **kwargs): ...
def _multidim_any(mask, dim, keepdim): ...
def _get_masked_fn(fn): ...
def _torch_reduce_all(fn): ...
def _torch_reduce_dim(fn): ...
def _torch_reduce(fn): ...
def _reduce_dim_args(input, dim, keepdim: bool = False, dtype=None): ...
def _torch_grad_reduce(fn): ...

REDUCE_NAMES: Incomplete
NATIVE_REDUCE_MAP: Incomplete
TORCH_REDUCE_MAP: Incomplete
TENSOR_REDUCE_MAP: Incomplete
NATIVE_REDUCE_FNS: Incomplete
TORCH_REDUCE_FNS: Incomplete
TENSOR_REDUCE_FNS: Incomplete

def _is_reduction(fn): ...
def _apply_reduction(fn, *args, **kwargs): ...
