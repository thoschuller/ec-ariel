import torch
import torch.nn as nn
from .ns_types import NSSingleResultType as NSSingleResultType, NSSingleResultValuesType as NSSingleResultValuesType
from .utils import get_target_type_str as get_target_type_str, getattr_from_fqn as getattr_from_fqn, return_first_non_observer_node as return_first_non_observer_node
from _typeshed import Incomplete
from torch.fx import GraphModule as GraphModule
from torch.fx.graph import Node as Node
from typing import Callable

toq: Incomplete

def mod_weight_detach(mod: nn.Module) -> torch.Tensor: ...
def mod_0_weight_detach(mod: nn.Module) -> torch.Tensor: ...
def mod_weight_bias_0(mod: nn.Module) -> torch.Tensor: ...
def get_lstm_weight(mod: nn.Module) -> list[torch.Tensor]: ...
def get_qlstm_weight(mod: nn.Module) -> list[torch.Tensor]: ...
def get_conv_mod_weight(mod: nn.Module) -> torch.Tensor: ...
def get_linear_mod_weight(mod: nn.Module) -> torch.Tensor: ...
def get_lstm_mod_weights(mod: nn.Module) -> list[torch.Tensor]: ...
def get_conv_fun_weight(node: Node, gm: GraphModule) -> torch.Tensor: ...
def get_qconv_fun_weight(node: Node, gm: GraphModule) -> torch.Tensor: ...
def get_linear_fun_weight(node: Node, gm: GraphModule) -> torch.Tensor: ...
def get_qlinear_fun_weight(node: Node, gm: GraphModule) -> torch.Tensor: ...
def get_op_to_type_to_weight_extraction_fn() -> dict[str, dict[Callable, Callable]]: ...
def extract_weight_from_node(node: Node, gm: GraphModule, op_to_type_to_weight_extraction_fn: dict[str, dict[Callable, Callable]] | None = None) -> NSSingleResultType | None: ...
