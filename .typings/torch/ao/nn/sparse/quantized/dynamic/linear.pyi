import torch
from _typeshed import Incomplete

__all__ = ['Linear']

class Linear(torch.nn.Module):
    """
    A dynamically quantized sparse linear module with float tensor as inputs and outputs.
    """
    _version: int
    _op_type: str
    _FLOAT_MODULE = torch.nn.Linear
    in_features: Incomplete
    out_features: Incomplete
    _packed_params: Incomplete
    def __init__(self, in_features, out_features, row_block_size, col_block_size, bias: bool = True, dtype=...) -> None: ...
    def _get_name(self): ...
    def extra_repr(self): ...
    def __repr__(self) -> str: ...
    def forward(self, x: torch.Tensor) -> torch.Tensor: ...
    def _save_to_state_dict(self, destination, prefix, keep_vars) -> None: ...
    def _load_from_state_dict(self, state_dict, prefix, local_metadata, strict, missing_keys, unexpected_keys, error_msgs) -> None: ...
    def _weight_bias(self): ...
    def weight(self): ...
    def bias(self): ...
    def set_weight_bias(self, w: torch.Tensor, b: torch.Tensor | None, row_block_size: int | None, col_block_size: int | None) -> None: ...
    @classmethod
    def from_float(cls, mod, use_precomputed_fake_quant: bool = False):
        """Create a quantized sparse dynamic module from a float module.

        We only care about the convert at this stage, no need for observers just yet.
        """
