from torch._inductor.autoheuristic.autoheuristic_utils import AHContext as AHContext, AHMetadata as AHMetadata, Choice as Choice
from torch._inductor.autoheuristic.learnedheuristic_interface import LearnedHeuristicDecision as LearnedHeuristicDecision

class MMRankingH100(LearnedHeuristicDecision):
    choices: list[Choice]
    def __init__(self) -> None: ...
    def check_precondition(self, metadata: AHMetadata, context: AHContext) -> bool: ...
    def get_confidence_threshold(self) -> float: ...
    def get_choice(self, idx: int) -> str | None: ...
    def fill_choices(self) -> None: ...
    def get_name(self) -> str: ...
    def get_best_choices(self, context: AHContext) -> list[tuple[float, int]] | None: ...
