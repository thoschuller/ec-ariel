from torch._inductor.autoheuristic.autoheuristic_utils import AHContext as AHContext, AHMetadata as AHMetadata, Choice as Choice

class LearnedHeuristic:
    """
    LearnedHeuristic is a base class for all learned heuristics.
    """
    def __init__(self) -> None: ...
    def check_precondition(self, metadata: AHMetadata, context: AHContext) -> bool: ...
    def get_decision(self, context: AHContext, choices: list[Choice]) -> Choice | None: ...
    def get_confidence_threshold(self) -> float: ...
    def get_name(self) -> str: ...
    def get_decisions_ranked(self, context: AHContext) -> list[str] | None: ...

class LearnedHeuristicRegression(LearnedHeuristic):
    def __init__(self) -> None: ...
    def get_feedback(self, context: AHContext, choice: Choice) -> float: ...
    def get_decision(self, context: AHContext, choices: list[Choice]) -> Choice | None: ...

class LearnedHeuristicDecision(LearnedHeuristic):
    def __init__(self) -> None: ...
    def get_choice(self, idx: int) -> str | None: ...
    def get_decision(self, context: AHContext, choices: list[Choice]) -> Choice | None: ...
    def get_decisions_ranked(self, context: AHContext) -> list[str] | None: ...
    def get_best_choices(self, context: AHContext) -> list[tuple[float, int]] | None: ...
