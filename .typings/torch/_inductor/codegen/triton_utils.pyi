from .. import config as config
from ..runtime.hints import AttrsDescriptorWrapper as AttrsDescriptorWrapper
from ..utils import _type_of as _type_of, expr_fits_within_32bit as expr_fits_within_32bit, triton_version_uses_attrs_dict as triton_version_uses_attrs_dict
from ..virtualized import V as V
from .common import ArgName as ArgName, ConstexprArg as ConstexprArg, KernelArgType as KernelArgType, SizeArg as SizeArg, TMADescriptorArg as TMADescriptorArg, TensorArg as TensorArg, WorkspaceArg as WorkspaceArg
from typing import Any

def should_unwrap_unspec_arg(name: str): ...
def signature_of(arg: KernelArgType, *, size_dtype: str | None) -> str: ...
def non_constexpr_signature(signature): ...
def signature_to_meta(signature: list[KernelArgType], *, size_dtype: str | None, argdefs: list[ArgName], indices: list[int] | None = None, is_template: bool = False) -> dict[str, str]: ...
def is_unaligned_buffer(arg: TensorArg): ...
def _arg_equals_1(arg: KernelArgType) -> bool: ...
def equal_1_arg_indices(args: list[KernelArgType], *, indices: list[int] | None = None) -> tuple[int, ...]: ...
def config_of(args: list[KernelArgType], *, indices: list[int] | None = None) -> Any: ...
