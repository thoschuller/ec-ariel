from _typeshed import Incomplete
from ck4inductor.grouped_conv_fwd.op import CKGroupedConvFwdOp as CKGroupedConvFwdOp
from torch._inductor import config as config
from torch._inductor.codegen.rocm.ck_template import CKTemplate as CKTemplate
from torch._inductor.codegen.rocm.rocm_kernel import ROCmTemplateKernel as ROCmTemplateKernel
from torch._inductor.utils import IndentedBuffer as IndentedBuffer
from torch._inductor.virtualized import V as V

log: Incomplete

def torch_layout_to_ck_layouts(torch_layout): ...
def torch_layout_to_ck_input_layout(torch_layout): ...
def torch_layout_to_ck_weight_layout(torch_layout): ...
def torch_layout_to_ck_output_layout(torch_layout): ...

class CKGroupedConvFwdTemplate(CKTemplate):
    conv_template: str
    def globals(self) -> IndentedBuffer: ...
    def header(self) -> IndentedBuffer: ...
    @staticmethod
    def add_ck_conv_choices(choices, layout, input_nodes, *, stride, padding, dilation, groups, n_spatial_dimensions) -> None: ...
    stride: Incomplete
    padding: Incomplete
    dilation: Incomplete
    groups: Incomplete
    n_spatial_dimensions: Incomplete
    def __init__(self, input_nodes, layout, *, stride, padding, dilation, groups, n_spatial_dimensions) -> None: ...
    def filter_op(self, op: CKGroupedConvFwdOp): ...
    def gen_ops(self): ...
    def emit_ck_instance(self, op: CKGroupedConvFwdOp) -> tuple[str, str]: ...
    output_node: Incomplete
    def render(self, kernel: ROCmTemplateKernel, op: CKGroupedConvFwdOp, **kwargs) -> str: ...
    def size_args(self): ...
