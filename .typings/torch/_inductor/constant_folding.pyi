import torch
from _typeshed import Incomplete
from torch._inductor.freezing_utils import maybe_set_is_frozen_param as maybe_set_is_frozen_param
from torch.utils._ordered_set import OrderedSet as OrderedSet
from typing import Any, Callable

aten: Incomplete
META_TAG: str
MODULE_TAG: str
CONST_MODULE_TAG: str
_dont_constant_fold: list[torch.fx.node.Target]

def add_dont_constant_fold(op: torch.fx.node.Target) -> None: ...
def clear_dont_constant_fold() -> None: ...
def replace_node_with_constant(gm: torch.fx.GraphModule, node: torch.fx.Node, constant: torch.Tensor | None = None, name: str | None = None) -> None: ...
def is_const_source(node: torch.fx.Node, lifted_constant_names: list[str] | None) -> bool: ...

class ConstantFolder(torch.fx.Interpreter):
    node_replacements: dict[torch.fx.Node, Any]
    replaced_uses: dict[torch.fx.Node, int]
    unknown_value: Incomplete
    skip_constructors: bool
    user_to_last_uses: Incomplete
    lifted_constant_names: Incomplete
    deferred_value: Incomplete
    skip_folding_node_fn: Incomplete
    def __init__(self, gm: torch.fx.GraphModule, skip_constructors: bool = False, lifted_constant_names: list[str] | None = None, skip_folding_node_fn: Callable[[torch.fx.Node], bool] | None = None) -> None: ...
    def _support_dynamic_shape(self) -> bool: ...
    def _deduce_value(self, node: torch.fx.Node) -> Any: ...
    def is_impure(self, node: torch.fx.node.Node) -> bool: ...
    def node_to_last_non_output_use(self) -> dict[torch.fx.Node, list[torch.fx.Node]]: ...
    def run_node(self, node: torch.fx.Node) -> Any: ...
    def insertable_tensor_check(self, tensor: torch.Tensor) -> bool: ...
    def add_node_replacement(self, node: torch.fx.Node, tensor: torch.Tensor) -> None: ...
    def run(self) -> Any: ...
    def insert_placerholder_values(self, env: dict[torch.fx.Node, Any]) -> None: ...

def constant_fold(gm: torch.fx.GraphModule, constraint_fn: Callable[[torch.fx.Node], bool] | None = None) -> None: ...
def constant_graph_tag(gm: torch.fx.GraphModule, skip_constructors: bool = True, lifted_constant_names: list[str] | None = None, skip_folding_node_fn: Callable[[torch.fx.Node], bool] | None = None) -> None: ...
def run_and_get_constant_graph(gm: torch.fx.GraphModule, skip_constructors: bool = True, lifted_constant_names: list[str] | None = None, skip_folding_node_fn: Callable[[torch.fx.Node], bool] | None = None) -> torch.fx.GraphModule:
    """
    Construct a GraphModule which corresponds to the part which could be
    constant folded in provided gm.
    """
