import dataclasses
import torch
from .utils import print_once as print_once
from _typeshed import Incomplete
from typing import Any
from typing_extensions import Self

@dataclasses.dataclass
class ProfileMetrics:
    microseconds: float = ...
    operators: int = ...
    fusions: int = ...
    graphs: int = ...
    def __iadd__(self, other: Self) -> Self: ...
    def __add__(self, other: ProfileMetrics) -> ProfileMetrics: ...
    def __truediv__(self, other: Any) -> ProfileMetrics: ...
    def __str__(self) -> str: ...
    def tocsv(self) -> list[float]: ...

class ProfileResult:
    captured: ProfileMetrics
    total: ProfileMetrics
    unique_graphs: int
    def __init__(self, captured: ProfileMetrics, total: ProfileMetrics, unique_graphs: int) -> None: ...
    def __iadd__(self, other: Self) -> Self: ...
    def percent(self) -> ProfileMetrics: ...
    def __str__(self) -> str: ...
    def tocsv(self) -> list[Any]: ...

def should_print_missing() -> bool: ...
def print_missing(stack: list[str]) -> None: ...

class Profiler:
    unique_graphs: int
    prof: Incomplete
    def __init__(self) -> None: ...
    def results(self) -> ProfileResult: ...

def fx_insert_profiling(gm: torch.fx.GraphModule, example_inputs: list[Any]) -> Any: ...
