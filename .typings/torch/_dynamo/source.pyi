import dataclasses
import enum
import functools
from . import utils as utils
from .bytecode_transformation import create_call_function as create_call_function, create_instruction as create_instruction
from .codegen import PyCodegen as PyCodegen
from _typeshed import Incomplete
from torch._guards import ChainedSource as ChainedSource, GuardSource as GuardSource, Source as Source
from typing import Any

_GUARD_SOURCE_SPECIALIZED_NN_MODULE: Incomplete
_GUARD_SOURCE_UNSPECIALIZED_NN_MODULE: Incomplete
_GUARD_SOURCE_UNSPECIALIZED_BUILTIN_NN_MODULE: Incomplete
_GUARD_SOURCE_FSDP_MODULE: Incomplete

def is_constant_source(source): ...

@dataclasses.dataclass(frozen=True)
class LocalSource(Source):
    local_name: str
    is_input: bool = ...
    dynamism: frozenset[str] | None = ...
    is_derefed_cell_contents: bool = ...
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class SyntheticLocalSource(Source):
    local_name: str
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class RandomValueSource(Source):
    random_call_index: int
    def guard_source(self): ...
    def reconstruct(self, codegen: PyCodegen): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class GlobalSource(Source):
    global_name: str
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class GlobalWeakRefSource(Source):
    global_name: str
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class WeakRefCallSource(ChainedSource):
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class CallFunctionNoArgsSource(WeakRefCallSource): ...

@dataclasses.dataclass(frozen=True)
class AttrSource(ChainedSource):
    member: str
    def __post_init__(self) -> None: ...
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class GenericAttrSource(ChainedSource):
    member: str
    def __post_init__(self) -> None: ...
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class LocalCellSource(Source):
    """
    Conceptually, this class is `LocalSource` for cell objects implicitly
    generated by Python (e.g., captured variables).
    """
    local_name: str
    def reconstruct(self, codegen: PyCodegen): ...

@dataclasses.dataclass(frozen=True)
class GradSource(ChainedSource):
    member: str = ...
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class ParamBufferSource(AttrSource):
    def guard_source(self): ...

@dataclasses.dataclass(frozen=True)
class UnspecializedParamBufferSource(AttrSource): ...

@dataclasses.dataclass(frozen=True)
class EphemeralSource(Source):
    desc: str | None = ...
    def guard_source(self): ...
    def name(self): ...
    def make_guard(self, fn) -> None: ...
    def is_ephemeral(self): ...

class TensorProperty(enum.Enum):
    SIZE = 0
    STRIDE = 1
    STORAGE_OFFSET = 2
    def method_name(self): ...

@dataclasses.dataclass(frozen=True)
class TensorPropertySource(ChainedSource):
    prop: TensorProperty
    idx: int | None = ...
    def __post_init__(self) -> None: ...
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class IndexedSource(ChainedSource):
    idx: int
    def __post_init__(self) -> None: ...
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class NegateSource(ChainedSource):
    def __post_init__(self) -> None: ...
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class ConvertIntSource(ChainedSource):
    def __post_init__(self) -> None: ...
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class FlattenScriptObjectSource(ChainedSource):
    def __post_init__(self) -> None: ...
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class ScriptObjectQualifiedNameSource(ChainedSource):
    def __post_init__(self) -> None: ...
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

class AttrProxySource(ChainedSource):
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class DefaultsSource(ChainedSource):
    idx_key: int | str
    is_kw: bool = ...
    field: str = dataclasses.field(init=False, repr=False, compare=False)
    _name: str = dataclasses.field(init=False, repr=False, compare=False)
    def __post_init__(self) -> None: ...
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class GetItemSource(ChainedSource):
    index: Any
    index_is_slice: bool = ...
    def __post_init__(self) -> None: ...
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def unpack_slice(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class ConstDictKeySource(ChainedSource):
    index: Any
    def guard_source(self): ...
    def reconstruct(self, codegen: PyCodegen): ...
    def name(self): ...
    def is_dict_key(self): ...

@dataclasses.dataclass(frozen=True)
class DictGetItemSource(ChainedSource):
    index: Any
    def __post_init__(self) -> None: ...
    def guard_source(self): ...
    def reconstruct(self, codegen: PyCodegen): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class DictSubclassGetItemSource(ChainedSource):
    index: Any
    def __post_init__(self) -> None: ...
    def guard_source(self): ...
    def reconstruct(self, codegen: PyCodegen): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class ListGetItemSource(GetItemSource):
    """
    Same as GetItemSource with reconstruct and name overridden to be list specific.
    """
    def reconstruct(self, codegen: PyCodegen): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class TupleIteratorGetItemSource(GetItemSource):
    def reconstruct(self, codegen: PyCodegen): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class DataclassFieldsSource(ChainedSource):
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class TypeSource(ChainedSource):
    def __post_init__(self) -> None: ...
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class OptimizerSource(ChainedSource):
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class NNModuleSource(ChainedSource):
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...

@dataclasses.dataclass(frozen=True)
class UnspecializedNNModuleSource(NNModuleSource):
    def guard_source(self): ...

@dataclasses.dataclass(frozen=True)
class UnspecializedBuiltinNNModuleSource(UnspecializedNNModuleSource):
    def guard_source(self): ...

@dataclasses.dataclass(frozen=True)
class FSDPNNModuleSource(NNModuleSource):
    def guard_source(self): ...

@dataclasses.dataclass(frozen=True)
class GlobalStateSource(Source):
    def name(self): ...
    def guard_source(self): ...

@dataclasses.dataclass(frozen=True)
class TorchFunctionModeStackSource(Source):
    ind: int
    def name(self): ...
    def _get_index(self): ...
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...

@dataclasses.dataclass(frozen=True)
class ConstantSource(Source):
    source_name: str
    def reconstruct(self, codegen: PyCodegen): ...
    def guard_source(self): ...
    def name(self): ...
    def make_guard(self, fn) -> None: ...

@dataclasses.dataclass(frozen=True)
class NumpyTensorSource(ChainedSource):
    def name(self) -> str: ...
    def guard_source(self): ...
    def reconstruct(self, codegen: PyCodegen): ...

@dataclasses.dataclass(frozen=True)
class SubclassAttrListSource(ChainedSource):
    def name(self) -> str: ...
    def guard_source(self): ...

@dataclasses.dataclass(frozen=True)
class FloatTensorSource(ChainedSource):
    def name(self) -> str: ...
    def guard_source(self): ...

@dataclasses.dataclass(frozen=True)
class CallMethodItemSource(ChainedSource):
    def name(self) -> str: ...
    def guard_source(self): ...

@dataclasses.dataclass(frozen=True)
class ShapeEnvSource(Source):
    def name(self): ...
    def guard_source(self): ...

@dataclasses.dataclass(frozen=True)
class BackwardStateSource(Source):
    def name(self): ...
    def guard_source(self): ...

def get_local_source_name(source: Source, *, only_allow_input: bool = False) -> str | None: ...
def is_from_local_source(source: Source, *, only_allow_input: bool = False): ...
def is_from_global_source(source: Source) -> bool: ...
def get_global_source_name(source: Source) -> str | None: ...
def is_from_nonlocal_source(source: Source): ...
def is_from_source(source: Source, target: Source): ...
@functools.lru_cache
def is_from_unspecialized_nn_module_source(source: Source): ...
@functools.lru_cache
def is_from_unspecialized_builtin_nn_module_source(source: Source): ...
@functools.lru_cache
def is_from_unspecialized_param_buffer_source(source: Source): ...
@functools.lru_cache
def is_from_flatten_script_object_source(source: Source): ...
@functools.lru_cache
def is_from_optimizer_source(source: Source): ...
@functools.lru_cache
def is_from_defaults(source: Source): ...
