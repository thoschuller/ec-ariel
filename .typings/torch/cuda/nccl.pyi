import torch
import torch.cuda
from collections.abc import Sequence

__all__ = ['all_reduce', 'reduce', 'broadcast', 'all_gather', 'reduce_scatter']

def all_reduce(inputs, outputs=None, op=..., streams=None, comms=None) -> None: ...
def reduce(inputs: Sequence[torch.Tensor], output: torch.Tensor | Sequence[torch.Tensor] | None = None, root: int = 0, op: int = ..., streams: Sequence[torch.cuda.Stream] | None = None, comms=None, *, outputs: Sequence[torch.Tensor] | None = None) -> None: ...
def broadcast(inputs: Sequence[torch.Tensor], root: int = 0, streams=None, comms=None) -> None: ...
def all_gather(inputs: Sequence[torch.Tensor], outputs: Sequence[torch.Tensor], streams=None, comms=None) -> None: ...
def reduce_scatter(inputs: Sequence[torch.Tensor], outputs: Sequence[torch.Tensor], op: int = ..., streams=None, comms=None) -> None: ...
