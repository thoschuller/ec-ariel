import torch
from torch import Tensor
from torch._decomp.decompositions import pw_cast_for_opmath
from torch._prims_common import DimsType, TensorLikeType

__all__ = ['diagonal', 'matrix_norm', 'norm', 'svd', 'svdvals', 'vector_norm', 'vecdot', 'cross']

@pw_cast_for_opmath
def cross(a: Tensor, b: Tensor, dim: int = -1): ...
def diagonal(input: TensorLikeType, *, offset: int = 0, dim1: int = -2, dim2: int = -1) -> TensorLikeType: ...
def vector_norm(x: TensorLikeType, ord: float | int = 2, dim: DimsType | None = None, keepdim: bool = False, *, dtype: torch.dtype | None = None) -> Tensor: ...
def matrix_norm(A: TensorLikeType, ord: float | str = 'fro', dim: DimsType = (-2, -1), keepdim: bool = False, *, dtype: torch.dtype | None = None) -> TensorLikeType: ...
def norm(A: TensorLikeType, ord: float | str | None = None, dim: DimsType | None = None, keepdim: bool = False, *, dtype: torch.dtype | None = None) -> TensorLikeType: ...
def svd(A: TensorLikeType, full_matrices: bool = True) -> tuple[Tensor, Tensor, Tensor]: ...
def svdvals(A: TensorLikeType) -> Tensor: ...
def vecdot(x: Tensor, y: Tensor, dim: int = -1) -> Tensor: ...
