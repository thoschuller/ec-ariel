from torch._prims_common import DimsType, ShapeType, TensorLikeType
from typing import NamedTuple

__all__ = ['fft', 'fft2', 'fftn', 'hfft', 'hfft2', 'hfftn', 'rfft', 'rfft2', 'rfftn', 'ifft', 'ifft2', 'ifftn', 'ihfft', 'ihfft2', 'ihfftn', 'irfft', 'irfft2', 'irfftn', 'fftshift', 'ifftshift']

def fft(input: TensorLikeType, n: int | None = None, dim: int = -1, norm: NormType = None) -> TensorLikeType: ...
def ifft(input: TensorLikeType, n: int | None = None, dim: int = -1, norm: NormType = None) -> TensorLikeType: ...
def rfft(input: TensorLikeType, n: int | None = None, dim: int = -1, norm: NormType = None) -> TensorLikeType: ...
def irfft(input: TensorLikeType, n: int | None = None, dim: int = -1, norm: NormType = None) -> TensorLikeType: ...
def hfft(input: TensorLikeType, n: int | None = None, dim: int = -1, norm: NormType = None) -> TensorLikeType: ...
def ihfft(input: TensorLikeType, n: int | None = None, dim: int = -1, norm: NormType = None) -> TensorLikeType: ...

class _ShapeAndDims(NamedTuple):
    shape: tuple[int, ...]
    dims: tuple[int, ...]

def fftn(input: TensorLikeType, s: ShapeType | None = None, dim: DimsType | None = None, norm: NormType = None) -> TensorLikeType: ...
def ifftn(input: TensorLikeType, s: ShapeType | None = None, dim: DimsType | None = None, norm: NormType = None) -> TensorLikeType: ...
def rfftn(input: TensorLikeType, s: ShapeType | None = None, dim: DimsType | None = None, norm: NormType = None) -> TensorLikeType: ...
def ihfftn(input: TensorLikeType, s: ShapeType | None = None, dim: DimsType | None = None, norm: NormType = None) -> TensorLikeType: ...

class _CanonicalizeC2rReturn(NamedTuple):
    shape: tuple[int, ...]
    dim: tuple[int, ...]
    last_dim_size: int

def irfftn(input: TensorLikeType, s: ShapeType | None = None, dim: DimsType | None = None, norm: NormType = None) -> TensorLikeType: ...
def hfftn(input: TensorLikeType, s: ShapeType | None = None, dim: DimsType | None = None, norm: NormType = None) -> TensorLikeType: ...
def fft2(input: TensorLikeType, s: ShapeType | None = None, dim: DimsType | None = (-2, -1), norm: NormType = None) -> TensorLikeType: ...
def ifft2(input: TensorLikeType, s: ShapeType | None = None, dim: DimsType | None = (-2, -1), norm: NormType = None) -> TensorLikeType: ...
def rfft2(input: TensorLikeType, s: ShapeType | None = None, dim: DimsType | None = (-2, -1), norm: NormType = None) -> TensorLikeType: ...
def irfft2(input: TensorLikeType, s: ShapeType | None = None, dim: DimsType | None = (-2, -1), norm: NormType = None) -> TensorLikeType: ...
def hfft2(input: TensorLikeType, s: ShapeType | None = None, dim: DimsType | None = (-2, -1), norm: NormType = None) -> TensorLikeType: ...
def ihfft2(input: TensorLikeType, s: ShapeType | None = None, dim: DimsType | None = (-2, -1), norm: NormType = None) -> TensorLikeType: ...
def fftshift(input: TensorLikeType, dim: DimsType | None = None) -> TensorLikeType: ...
def ifftshift(input: TensorLikeType, dim: DimsType | None = None) -> TensorLikeType: ...
