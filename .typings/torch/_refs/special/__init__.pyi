import torch
from _typeshed import Incomplete
from torch._prims_common import NumberType, TensorLikeType

__all__ = ['bessel_j0', 'bessel_j1', 'entr', 'erfcx', 'expit', 'i0e', 'i1', 'i1e', 'log_ndtr', 'logit', 'log_softmax', 'multigammaln', 'ndtr', 'ndtri', 'softmax', 'spherical_bessel_j0', 'xlog1py', 'zeta']

def bessel_j0(a: TensorLikeType) -> TensorLikeType: ...
def bessel_j1(a: TensorLikeType) -> TensorLikeType: ...
def entr(a: TensorLikeType) -> TensorLikeType: ...
def erfcx(a: TensorLikeType) -> TensorLikeType: ...

expit: Incomplete

def i0e(a: TensorLikeType) -> TensorLikeType: ...
def i1(a: TensorLikeType) -> TensorLikeType: ...
def i1e(a: TensorLikeType) -> TensorLikeType: ...
def log_ndtr(a: TensorLikeType) -> TensorLikeType: ...
def logit(self, eps: float | None = None) -> TensorLikeType: ...
def xlog1py(a: TensorLikeType | NumberType, b: TensorLikeType | NumberType): ...
def multigammaln(a: TensorLikeType, p: int) -> TensorLikeType: ...
def ndtr(a: TensorLikeType) -> TensorLikeType: ...
def ndtri(a: TensorLikeType) -> TensorLikeType: ...
def log_softmax(a: TensorLikeType, dim: int, dtype: torch.dtype | None = None) -> TensorLikeType: ...
def softmax(a: TensorLikeType, dim: int, dtype: torch.dtype | None = None) -> TensorLikeType: ...
def spherical_bessel_j0(a: TensorLikeType) -> TensorLikeType: ...
def zeta(a: TensorLikeType, b: TensorLikeType) -> TensorLikeType: ...
