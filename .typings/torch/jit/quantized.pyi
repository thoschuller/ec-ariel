import torch

class QuantizedLinear(torch.jit.ScriptModule):
    def __init__(self, other) -> None: ...

class QuantizedLinearFP16(torch.jit.ScriptModule):
    def __init__(self, other) -> None: ...

class QuantizedRNNCellBase(torch.jit.ScriptModule):
    def __init__(self, other) -> None: ...

class QuantizedRNNCell(QuantizedRNNCellBase):
    def __init__(self, other) -> None: ...

class QuantizedLSTMCell(QuantizedRNNCellBase):
    def __init__(self, other) -> None: ...

class QuantizedGRUCell(QuantizedRNNCellBase):
    def __init__(self, other) -> None: ...

class QuantizedRNNBase(torch.jit.ScriptModule):
    def __init__(self, other, dtype=...) -> None: ...

class QuantizedLSTM(QuantizedRNNBase):
    def __init__(self, other, dtype) -> None: ...

class QuantizedGRU(QuantizedRNNBase):
    def __init__(self, *args, **kwargs) -> None: ...

def quantize_rnn_cell_modules(module) -> None: ...
def quantize_linear_modules(module, dtype=...) -> None: ...
def quantize_rnn_modules(module, dtype=...) -> None: ...
