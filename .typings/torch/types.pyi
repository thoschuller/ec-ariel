from collections.abc import Sequence
from torch import DispatchKey as DispatchKey, Size as Size, SymBool as SymBool, SymFloat as SymFloat, SymInt as SymInt, Tensor as Tensor, device as _device, dtype as _dtype
from typing import Any
from typing_extensions import Self, TypeAlias

__all__ = ['Number', 'Device', 'FileLike', 'Storage']

_TensorOrTensors: TypeAlias = Tensor | Sequence[Tensor]
_size: TypeAlias = Size | list[int] | tuple[int, ...]
_symsize: TypeAlias = Size | Sequence[int | SymInt]
_dispatchkey: TypeAlias = str | DispatchKey
IntLikeType: TypeAlias = int | SymInt
FloatLikeType: TypeAlias = float | SymFloat
BoolLikeType: TypeAlias = bool | SymBool
PySymType: TypeAlias = SymInt | SymFloat | SymBool
Number: TypeAlias = int | float | bool
FileLike: TypeAlias
Device: TypeAlias = _device | str | int | None

class Storage:
    _cdata: int
    device: _device
    dtype: _dtype
    _torch_load_uninitialized: bool
    def __deepcopy__(self, memo: dict[int, Any]) -> Self: ...
    def _new_shared(self, size: int) -> Self: ...
    def _write_file(self, f: Any, is_real_file: bool, save_size: bool, element_size: int) -> None: ...
    def element_size(self) -> int: ...
    def is_shared(self) -> bool: ...
    def share_memory_(self) -> Self: ...
    def nbytes(self) -> int: ...
    def cpu(self) -> Self: ...
    def data_ptr(self) -> int: ...
    def from_file(self, filename: str, shared: bool = False, nbytes: int = 0) -> Self: ...
    def _new_with_file(self, f: Any, element_size: int) -> Self: ...
