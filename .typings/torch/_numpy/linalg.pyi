from . import _dtypes_impl as _dtypes_impl, _util as _util
from ._normalizations import ArrayLike as ArrayLike, KeepDims as KeepDims, normalizer as normalizer
from collections.abc import Sequence

class LinAlgError(Exception): ...

def _atleast_float_1(a): ...
def _atleast_float_2(a, b): ...
def linalg_errors(func): ...
@normalizer
@linalg_errors
def matrix_power(a: ArrayLike, n): ...
@normalizer
@linalg_errors
def multi_dot(inputs: Sequence[ArrayLike], *, out=None): ...
@normalizer
@linalg_errors
def solve(a: ArrayLike, b: ArrayLike): ...
@normalizer
@linalg_errors
def lstsq(a: ArrayLike, b: ArrayLike, rcond=None): ...
@normalizer
@linalg_errors
def inv(a: ArrayLike): ...
@normalizer
@linalg_errors
def pinv(a: ArrayLike, rcond: float = 1e-15, hermitian: bool = False): ...
@normalizer
@linalg_errors
def tensorsolve(a: ArrayLike, b: ArrayLike, axes=None): ...
@normalizer
@linalg_errors
def tensorinv(a: ArrayLike, ind: int = 2): ...
@normalizer
@linalg_errors
def det(a: ArrayLike): ...
@normalizer
@linalg_errors
def slogdet(a: ArrayLike): ...
@normalizer
@linalg_errors
def cond(x: ArrayLike, p=None): ...
@normalizer
@linalg_errors
def matrix_rank(a: ArrayLike, tol=None, hermitian: bool = False): ...
@normalizer
@linalg_errors
def norm(x: ArrayLike, ord=None, axis=None, keepdims: KeepDims = False): ...
@normalizer
@linalg_errors
def cholesky(a: ArrayLike): ...
@normalizer
@linalg_errors
def qr(a: ArrayLike, mode: str = 'reduced'): ...
@normalizer
@linalg_errors
def svd(a: ArrayLike, full_matrices: bool = True, compute_uv: bool = True, hermitian: bool = False): ...
@normalizer
@linalg_errors
def eig(a: ArrayLike): ...
@normalizer
@linalg_errors
def eigh(a: ArrayLike, UPLO: str = 'L'): ...
@normalizer
@linalg_errors
def eigvals(a: ArrayLike): ...
@normalizer
@linalg_errors
def eigvalsh(a: ArrayLike, UPLO: str = 'L'): ...
