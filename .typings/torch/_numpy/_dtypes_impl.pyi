from _typeshed import Incomplete
from typing import NamedTuple

class DefaultDTypes(NamedTuple):
    float_dtype: Incomplete
    complex_dtype: Incomplete
    int_dtype: Incomplete

_default_dtypes: Incomplete

def default_dtypes(): ...
def get_default_dtype_for(dtype):
    """Default scalar type given sctype category."""
def can_cast_impl(from_torch_dtype, to_torch_dtype, casting): ...
def result_type_impl(*tensors): ...
def python_type_for_torch(dtyp):
    """Get a python scalar type a torch dtype"""

_SCALAR_TYPES: Incomplete
_SCALAR_AND_SYMBOLIC_TYPES: Incomplete
_NEP50_FUNCS_TENSOR_ONLY: Incomplete

def is_scalar(x): ...
def is_scalar_or_symbolic(x): ...
def _dtype_for_scalar(py_type): ...
def _dtype_for_scalar_or_tensor(x): ...
def is_float_or_fp_tensor(x): ...
def is_complex_or_complex_tensor(x): ...
def _category(dtype): ...
def nep50_to_tensors(x1, x2, handle_weaks, function_name):
    """If either of inputs is a python scalar, type-promote with NEP 50."""
