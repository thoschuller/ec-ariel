from . import _dtypes_impl as _dtypes_impl, _util as _util
from ._normalizations import ArrayLike as ArrayLike, normalizer as normalizer

def upcast(func):
    """NumPy fft casts inputs to 64 bit and *returns 64-bit results*."""
@normalizer
@upcast
def fft(a: ArrayLike, n=None, axis: int = -1, norm=None): ...
@normalizer
@upcast
def ifft(a: ArrayLike, n=None, axis: int = -1, norm=None): ...
@normalizer
@upcast
def rfft(a: ArrayLike, n=None, axis: int = -1, norm=None): ...
@normalizer
@upcast
def irfft(a: ArrayLike, n=None, axis: int = -1, norm=None): ...
@normalizer
@upcast
def fftn(a: ArrayLike, s=None, axes=None, norm=None): ...
@normalizer
@upcast
def ifftn(a: ArrayLike, s=None, axes=None, norm=None): ...
@normalizer
@upcast
def rfftn(a: ArrayLike, s=None, axes=None, norm=None): ...
@normalizer
@upcast
def irfftn(a: ArrayLike, s=None, axes=None, norm=None): ...
@normalizer
@upcast
def fft2(a: ArrayLike, s=None, axes=(-2, -1), norm=None): ...
@normalizer
@upcast
def ifft2(a: ArrayLike, s=None, axes=(-2, -1), norm=None): ...
@normalizer
@upcast
def rfft2(a: ArrayLike, s=None, axes=(-2, -1), norm=None): ...
@normalizer
@upcast
def irfft2(a: ArrayLike, s=None, axes=(-2, -1), norm=None): ...
@normalizer
@upcast
def hfft(a: ArrayLike, n=None, axis: int = -1, norm=None): ...
@normalizer
@upcast
def ihfft(a: ArrayLike, n=None, axis: int = -1, norm=None): ...
@normalizer
def fftfreq(n, d: float = 1.0): ...
@normalizer
def rfftfreq(n, d: float = 1.0): ...
@normalizer
def fftshift(x: ArrayLike, axes=None): ...
@normalizer
def ifftshift(x: ArrayLike, axes=None): ...
