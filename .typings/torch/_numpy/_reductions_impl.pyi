from . import _dtypes_impl as _dtypes_impl, _util as _util
from ._normalizations import ArrayLike as ArrayLike, AxisLike as AxisLike, DTypeLike as DTypeLike, KeepDims as KeepDims, NotImplementedType as NotImplementedType, OutArray as OutArray

def _deco_axis_expand(func):
    """
    Generically handle axis arguments in reductions.
    axis is *always* the 2nd arg in the function so no need to have a look at its signature
    """
def _atleast_float(dtype, other_dtype):
    """Return a dtype that is real or complex floating-point.

    For inputs that are boolean or integer dtypes, this returns the default
    float dtype; inputs that are complex get converted to the default complex
    dtype; real floating-point dtypes (`float*`) get passed through unchanged
    """
@_deco_axis_expand
def count_nonzero(a: ArrayLike, axis: AxisLike = None, *, keepdims: KeepDims = False): ...
@_deco_axis_expand
def argmax(a: ArrayLike, axis: AxisLike = None, out: OutArray | None = None, *, keepdims: KeepDims = False): ...
@_deco_axis_expand
def argmin(a: ArrayLike, axis: AxisLike = None, out: OutArray | None = None, *, keepdims: KeepDims = False): ...
@_deco_axis_expand
def any(a: ArrayLike, axis: AxisLike = None, out: OutArray | None = None, keepdims: KeepDims = False, *, where: NotImplementedType = None): ...
@_deco_axis_expand
def all(a: ArrayLike, axis: AxisLike = None, out: OutArray | None = None, keepdims: KeepDims = False, *, where: NotImplementedType = None): ...
@_deco_axis_expand
def amax(a: ArrayLike, axis: AxisLike = None, out: OutArray | None = None, keepdims: KeepDims = False, initial: NotImplementedType = None, where: NotImplementedType = None): ...
max = amax

@_deco_axis_expand
def amin(a: ArrayLike, axis: AxisLike = None, out: OutArray | None = None, keepdims: KeepDims = False, initial: NotImplementedType = None, where: NotImplementedType = None): ...
min = amin

@_deco_axis_expand
def ptp(a: ArrayLike, axis: AxisLike = None, out: OutArray | None = None, keepdims: KeepDims = False): ...
@_deco_axis_expand
def sum(a: ArrayLike, axis: AxisLike = None, dtype: DTypeLike | None = None, out: OutArray | None = None, keepdims: KeepDims = False, initial: NotImplementedType = None, where: NotImplementedType = None): ...
@_deco_axis_expand
def prod(a: ArrayLike, axis: AxisLike = None, dtype: DTypeLike | None = None, out: OutArray | None = None, keepdims: KeepDims = False, initial: NotImplementedType = None, where: NotImplementedType = None): ...
product = prod

@_deco_axis_expand
def mean(a: ArrayLike, axis: AxisLike = None, dtype: DTypeLike | None = None, out: OutArray | None = None, keepdims: KeepDims = False, *, where: NotImplementedType = None): ...
@_deco_axis_expand
def std(a: ArrayLike, axis: AxisLike = None, dtype: DTypeLike | None = None, out: OutArray | None = None, ddof: int = 0, keepdims: KeepDims = False, *, where: NotImplementedType = None): ...
@_deco_axis_expand
def var(a: ArrayLike, axis: AxisLike = None, dtype: DTypeLike | None = None, out: OutArray | None = None, ddof: int = 0, keepdims: KeepDims = False, *, where: NotImplementedType = None): ...
def cumsum(a: ArrayLike, axis: AxisLike = None, dtype: DTypeLike | None = None, out: OutArray | None = None): ...
def cumprod(a: ArrayLike, axis: AxisLike = None, dtype: DTypeLike | None = None, out: OutArray | None = None): ...
cumproduct = cumprod

def average(a: ArrayLike, axis=None, weights: ArrayLike = None, returned: bool = False, *, keepdims: bool = False): ...
def quantile(a: ArrayLike, q: ArrayLike, axis: AxisLike = None, out: OutArray | None = None, overwrite_input: bool = False, method: str = 'linear', keepdims: KeepDims = False, *, interpolation: NotImplementedType = None): ...
def percentile(a: ArrayLike, q: ArrayLike, axis: AxisLike = None, out: OutArray | None = None, overwrite_input: bool = False, method: str = 'linear', keepdims: KeepDims = False, *, interpolation: NotImplementedType = None): ...
def median(a: ArrayLike, axis=None, out: OutArray | None = None, overwrite_input: bool = False, keepdims: KeepDims = False): ...
