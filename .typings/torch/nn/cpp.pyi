from _typeshed import Incomplete
from torch import nn as nn

class OrderedDictWrapper:
    """A wrapper around a C++ OrderedDict.

    It dynamically evaluates the OrderedDict getter on a bound C++ module, such
    that new changes on the C++ side are picked up. Otherwise accessing e.g.
    ``cpp_module._parameters`` just once would get a frozen copy of the parameters
    at the time of access. ``torch.nn.Module`` accesses ``_parameters`` et al. via ``self.__dict__``
    so using properties does not work.
    """
    cpp_module: Incomplete
    attr: Incomplete
    def __init__(self, cpp_module, attr) -> None: ...
    @property
    def cpp_dict(self): ...
    def items(self): ...
    def keys(self): ...
    def values(self): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __contains__(self, key) -> bool: ...
    def __getitem__(self, key): ...

class ModuleWrapper(nn.Module):
    """A subclass of ``torch.nn.Module`` that wraps a C++ frontend module and delegates all access."""
    cpp_module: Incomplete
    _parameters: Incomplete
    _buffers: OrderedDictWrapper
    _modules: OrderedDictWrapper
    def __init__(self, cpp_module) -> None: ...
    def _apply(self, fn, recurse: bool = True): ...
    @property
    def training(self): ...
    @training.setter
    def training(self, mode) -> None: ...
    def __repr__(self) -> str: ...
