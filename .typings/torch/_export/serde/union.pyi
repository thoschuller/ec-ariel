import functools
from _typeshed import Incomplete
from collections.abc import Hashable

class _UnionTag(str):
    __slots__: Incomplete
    _cls: Hashable
    @staticmethod
    def create(t, cls): ...
    def __eq__(self, cmp) -> bool: ...
    def __hash__(self): ...

@functools.cache
def _get_field_names(cls) -> set[str]: ...

class _Union:
    _type: _UnionTag
    @classmethod
    def create(cls, **kwargs): ...
    def __post_init__(self) -> None: ...
    @property
    def type(self) -> str: ...
    @property
    def value(self): ...
    def __getattribute__(self, name): ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
