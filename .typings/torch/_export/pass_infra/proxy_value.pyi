import torch
from _typeshed import Incomplete
from collections.abc import Iterable, Iterator
from typing import Generic, TypeVar

_T = TypeVar('_T')

class ProxyValue(Generic[_T]):
    data: Incomplete
    proxy_or_node: Incomplete
    def __init__(self, data: Iterable[_T], proxy: torch.fx.Proxy | torch.fx.Node) -> None: ...
    @property
    def node(self) -> torch.fx.Node: ...
    @property
    def proxy(self) -> torch.fx.Proxy: ...
    def to_tensor(self) -> torch.Tensor: ...
    def is_tensor(self) -> bool: ...
    def __iter__(self) -> Iterator[_T]: ...
    def __bool__(self) -> bool: ...
