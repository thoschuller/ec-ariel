import torch
from _typeshed import Incomplete
from typing import Any, Callable

aten: Incomplete
META_TAG: str
MODULE_TAG: str
CONST_MODULE_TAG: str

def replace_node_with_constant(gm, node, constant, name=None) -> None: ...

class ConstantFolder(torch.fx.Interpreter):
    node_replacements: dict[torch.fx.Node, Any]
    replaced_uses: dict[torch.fx.Node, int]
    unknown_value: Incomplete
    skip_constructors: bool
    user_to_last_uses: Incomplete
    def __init__(self, gm: torch.fx.GraphModule, skip_constructors: bool = False) -> None: ...
    def is_impure(self, node: torch.fx.Node) -> bool: ...
    def node_to_last_non_output_use(self): ...
    def run_node(self, node): ...
    def insertable_tensor_check(self, tensor: torch.Tensor) -> bool: ...
    def add_node_replacement(self, node: torch.fx.Node, tensor: torch.Tensor) -> None: ...
    def run(self): ...

def constant_fold(gm: torch.fx.GraphModule, constraint_fn: Callable[[torch.fx.Node], bool] | None = None): ...
def constant_graph_tag(gm: torch.fx.GraphModule) -> None: ...
def run_and_get_constant_graph(gm: torch.fx.GraphModule) -> torch.fx.GraphModule:
    """
    Construct a GraphModule which corresponds to the part which could be
    constant folded in provided gm.
    """
