import weakref
from _typeshed import Incomplete
from collections.abc import Generator, MutableMapping
from torch import Tensor
from weakref import ref

__all__ = ['TensorWeakRef', 'WeakIdRef', 'WeakIdKeyDictionary', 'WeakTensorKeyDictionary']

WeakRef = ref

class WeakIdRef(weakref.ref):
    __slots__: Incomplete
    _id: Incomplete
    def __init__(self, key, callback=None) -> None: ...
    def __call__(self): ...
    def __hash__(self): ...
    def __eq__(self, other): ...

class _WeakHashRef(weakref.ref):
    __slots__: Incomplete
    _id: Incomplete
    def __init__(self, key, callback=None) -> None: ...
    def __call__(self): ...
    def __hash__(self): ...
    def __eq__(self, other): ...

class WeakIdKeyDictionary(MutableMapping):
    data: Incomplete
    ref_type: Incomplete
    _remove: Incomplete
    _pending_removals: Incomplete
    _iterating: Incomplete
    _dirty_len: bool
    def __init__(self, dict=None, ref_type=...) -> None: ...
    def _commit_removals(self) -> None: ...
    def _scrub_removals(self) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __getitem__(self, key): ...
    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, key, value) -> None: ...
    def copy(self): ...
    __copy__ = copy
    def __deepcopy__(self, memo): ...
    def get(self, key, default=None): ...
    def __contains__(self, key) -> bool: ...
    def items(self) -> Generator[Incomplete]: ...
    def keys(self) -> Generator[Incomplete]: ...
    __iter__ = keys
    def values(self) -> Generator[Incomplete]: ...
    def keyrefs(self):
        """Return a list of weak references to the keys.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the keys around longer than needed.

        """
    def popitem(self): ...
    def pop(self, key, *args): ...
    def setdefault(self, key, default=None): ...
    def update(self, dict=None, **kwargs) -> None: ...
    def __ior__(self, other): ...
    def __or__(self, other): ...
    def __ror__(self, other): ...
    def __eq__(self, other): ...
WeakTensorKeyDictionary = WeakIdKeyDictionary

class TensorWeakRef:
    """Wrapper around a weak ref of a Tensor that handles the _fix_weakref() call required when unwrapping a Tensor weakref."""
    ref: WeakRef[Tensor]
    def __init__(self, tensor: Tensor) -> None: ...
    def __call__(self): ...
