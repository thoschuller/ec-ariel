import torch
from _typeshed import Incomplete
from torch.multiprocessing.reductions import StorageWeakRef as StorageWeakRef

def lazy_compile(**compile_kwargs):
    """Lazily wrap a function with torch.compile on the first call

    This avoids eagerly importing dynamo.
    """
def hash_storage_kernel(x): ...
def hash_storage(storage: torch.UntypedStorage, *, stable_hash: bool = False) -> str: ...

class ContentStoreWriter:
    loc: str
    seen_storage_hashes: set[str]
    stable_hash: Incomplete
    def __init__(self, loc: str, stable_hash: bool = False) -> None: ...
    def write_storage(self, storage: torch.UntypedStorage) -> str: ...
    def compute_tensor_metadata(self, t: torch.Tensor, h=None): ...
    def write_tensor(self, name: str, t: torch.Tensor) -> None: ...

class ContentStoreReader:
    loc: Incomplete
    storage_cache: dict[torch.device | None, dict[str, StorageWeakRef]] | None
    def __init__(self, loc: str, *, cache: bool = True) -> None: ...
    def read_storage(self, h: str, *, device=None) -> torch.UntypedStorage: ...
    def read_tensor_metadata(self, name: str): ...
    def read_tensor(self, name: str, *, device=None) -> torch.Tensor: ...
