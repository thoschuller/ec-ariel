import torch
from torch.utils._sympy.functions import BitwiseFn_bitwise_and as BitwiseFn_bitwise_and, BitwiseFn_bitwise_or as BitwiseFn_bitwise_or, FloatPow as FloatPow, FloatTrueDiv as FloatTrueDiv, FloorDiv as FloorDiv, IntTrueDiv as IntTrueDiv, Max as Max, Min as Min, Mod as Mod, OpaqueUnaryFn_exp as OpaqueUnaryFn_exp, OpaqueUnaryFn_log as OpaqueUnaryFn_log, OpaqueUnaryFn_log2 as OpaqueUnaryFn_log2, OpaqueUnaryFn_sqrt as OpaqueUnaryFn_sqrt, PowByNatural as PowByNatural, RoundDecimal as RoundDecimal, RoundToInt as RoundToInt, ToFloat as ToFloat, TruncToInt as TruncToInt, _keep_float as _keep_float

class ReferenceAnalysis:
    @staticmethod
    def constant(c, dtype): ...
    @staticmethod
    def or_(a, b): ...
    @staticmethod
    def and_(a, b): ...
    @staticmethod
    def eq(a, b): ...
    @classmethod
    def ne(cls, a, b): ...
    @staticmethod
    def lt(a, b): ...
    @staticmethod
    def gt(a, b): ...
    @staticmethod
    def le(a, b): ...
    @staticmethod
    def ge(a, b): ...
    @staticmethod
    def not_(a): ...
    @staticmethod
    def reciprocal(x): ...
    @staticmethod
    def square(x): ...
    @staticmethod
    def trunc_to_int(x, dtype): ...
    @staticmethod
    def ceil_to_int(x, dtype): ...
    @staticmethod
    def floor_to_int(x, dtype): ...
    @staticmethod
    def floor(x): ...
    @staticmethod
    def ceil(x): ...
    @staticmethod
    def to_dtype(x, dtype): ...
    @staticmethod
    def mod(x, y): ...
    @staticmethod
    def abs(x): ...
    @staticmethod
    def neg(x): ...
    @staticmethod
    def truediv(a, b): ...
    @staticmethod
    def int_truediv(a, b): ...
    @staticmethod
    def floordiv(a, b): ...
    @staticmethod
    def truncdiv(a, b) -> None: ...
    @staticmethod
    def add(a, b): ...
    @classmethod
    def sym_sum(cls, args): ...
    @staticmethod
    def mul(a, b): ...
    @staticmethod
    def sub(a, b): ...
    @staticmethod
    def exp(x): ...
    @staticmethod
    def log(x): ...
    @staticmethod
    def log2(x): ...
    @staticmethod
    def sqrt(x): ...
    @staticmethod
    def pow(a, b): ...
    @staticmethod
    def pow_by_natural(a, b): ...
    @staticmethod
    def minimum(a, b): ...
    @staticmethod
    def maximum(a, b): ...
    @staticmethod
    def round_to_int(a, dtype): ...
    @staticmethod
    def round_decimal(a, b): ...
    @staticmethod
    def bitwise_and(a, b): ...
    @staticmethod
    def bitwise_or(a, b): ...

class PythonReferenceAnalysis(ReferenceAnalysis):
    @staticmethod
    def constant(c, dtype): ...
    @staticmethod
    def not_(a): ...
    @classmethod
    def sym_sum(cls, args): ...
    @staticmethod
    def floordiv(a, b): ...
    @staticmethod
    def mod(x, y): ...
    @staticmethod
    def truncdiv(a, b): ...
    @staticmethod
    def to_dtype(x, dtype): ...
    @staticmethod
    def exp(x) -> None: ...
    @staticmethod
    def log(x) -> None: ...
    @staticmethod
    def log2(x): ...
    @staticmethod
    def sqrt(x): ...
    @staticmethod
    def minimum(a, b): ...
    @staticmethod
    def maximum(a, b): ...
    @staticmethod
    def floor_to_int(x, dtype): ...
    @staticmethod
    def ceil_to_int(x, dtype): ...
    @staticmethod
    def floor(x): ...
    @staticmethod
    def ceil(x): ...
    @staticmethod
    def truediv(a, b): ...
    @staticmethod
    def pow(a, b): ...
    @staticmethod
    def pow_by_natural(a, b): ...
    @staticmethod
    def round_to_int(a, dtype): ...
    @staticmethod
    def round_decimal(a, b): ...
    @staticmethod
    def bitwise_and(a, b): ...
    @staticmethod
    def bitwise_or(a, b): ...

class OptimizedPythonReferenceAnalysis(PythonReferenceAnalysis):
    @staticmethod
    def sym_sum(args): ...

def _to_dtype(x: torch.Tensor, dtype: torch.dtype) -> torch.Tensor: ...

class TensorReferenceAnalysis:
    @staticmethod
    def constant(c, dtype): ...
    @staticmethod
    def or_(a, b): ...
    @staticmethod
    def and_(a, b): ...
    @staticmethod
    def bitwise_and(a, b): ...
    @staticmethod
    def bitwise_or(a, b): ...
    @staticmethod
    def eq(a, b): ...
    @classmethod
    def ne(cls, a, b): ...
    @staticmethod
    def lt(a, b): ...
    @staticmethod
    def gt(a, b): ...
    @staticmethod
    def le(a, b): ...
    @staticmethod
    def ge(a, b): ...
    @staticmethod
    def not_(a): ...
    @staticmethod
    def reciprocal(x): ...
    @staticmethod
    def square(x): ...
    @staticmethod
    def trunc_to_int(x, dtype): ...
    @staticmethod
    def ceil_to_int(x, dtype): ...
    @staticmethod
    def floor_to_int(x, dtype): ...
    @staticmethod
    def floor(x): ...
    @staticmethod
    def ceil(x): ...
    @staticmethod
    def to_dtype(x, dtype): ...
    @staticmethod
    def mod(x, y) -> None: ...
    @staticmethod
    def abs(x): ...
    @staticmethod
    def neg(x): ...
    @staticmethod
    def truediv(a, b): ...
    @staticmethod
    def int_truediv(a, b): ...
    @staticmethod
    def floordiv(a, b): ...
    @staticmethod
    def truncdiv(a, b) -> None: ...
    @staticmethod
    def add(a, b): ...
    @staticmethod
    def mul(a, b): ...
    @staticmethod
    def sub(a, b): ...
    @staticmethod
    def exp(x): ...
    @staticmethod
    def log(x): ...
    @staticmethod
    def log2(x): ...
    @staticmethod
    def sqrt(x): ...
    @staticmethod
    def sin(x): ...
    @staticmethod
    def cos(x): ...
    @staticmethod
    def tanh(x): ...
    @staticmethod
    def sinh(x): ...
    @staticmethod
    def cosh(x): ...
    @staticmethod
    def tan(x): ...
    @staticmethod
    def acos(x): ...
    @staticmethod
    def atan(x): ...
    @staticmethod
    def asin(x): ...
    @staticmethod
    def pow(a, b): ...
    @staticmethod
    def pow_by_natural(a, b): ...
    @staticmethod
    def minimum(a, b): ...
    @staticmethod
    def maximum(a, b): ...
    @staticmethod
    def round_to_int(a, dtype): ...
    @staticmethod
    def round_decimal(a, b) -> None: ...
