from _typeshed import Incomplete
from sympy.core.numbers import Number
from sympy.core.singleton import Singleton

class IntInfinity(Number, metaclass=Singleton):
    """Positive integer infinite quantity.

    Integer infinity is a value in an extended integers which
    is greater than all other integers.  We distinguish it from
    sympy's existing notion of infinity in that it reports that
    it is_integer.

    Infinity is a singleton, and can be accessed by ``S.IntInfinity``,
    or can be imported as ``int_oo``.
    """
    is_integer: bool
    is_commutative: bool
    is_number: bool
    is_extended_real: bool
    is_comparable: bool
    is_extended_positive: bool
    is_prime: bool
    _op_priority: float
    __slots__: Incomplete
    def __new__(cls): ...
    def _sympystr(self, printer): ...
    def _eval_subs(self, old, new): ...
    def __add__(self, other): ...
    __radd__ = __add__
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __mul__(self, other): ...
    __rmul__ = __mul__
    def __truediv__(self, other): ...
    def __abs__(self): ...
    def __neg__(self): ...
    def _eval_power(self, expt): ...
    def _as_mpf_val(self, prec): ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __mod__(self, other): ...
    __rmod__ = __mod__
    def floor(self): ...
    def ceiling(self): ...

int_oo: Incomplete

class NegativeIntInfinity(Number, metaclass=Singleton):
    """Negative integer infinite quantity.

    NegativeInfinity is a singleton, and can be accessed
    by ``S.NegativeInfinity``.

    See Also
    ========

    IntInfinity
    """
    _op_priority: float
    is_integer: bool
    is_extended_real: bool
    is_commutative: bool
    is_comparable: bool
    is_extended_negative: bool
    is_number: bool
    is_prime: bool
    __slots__: Incomplete
    def __new__(cls): ...
    def _eval_subs(self, old, new): ...
    def _sympystr(self, printer): ...
    def __add__(self, other): ...
    __radd__ = __add__
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __mul__(self, other): ...
    __rmul__ = __mul__
    def __truediv__(self, other): ...
    def __abs__(self): ...
    def __neg__(self): ...
    def _eval_power(self, expt): ...
    def _as_mpf_val(self, prec): ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __mod__(self, other): ...
    __rmod__ = __mod__
    def floor(self): ...
    def ceiling(self): ...
    def as_powers_dict(self): ...
