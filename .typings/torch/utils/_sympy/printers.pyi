import sympy
from _typeshed import Incomplete
from sympy.printing.str import StrPrinter

INDEX_TYPE: str
INDEX_TYPE_MAX: Incomplete
INDEX_TYPE_MIN: Incomplete

class ExprPrinter(StrPrinter):
    printmethod: str
    def _print_Mul(self, expr: sympy.Expr) -> str: ...
    def _print_Add(self, expr: sympy.Expr, order: str | None = None) -> str: ...
    def _print_Relational(self, expr: sympy.Expr) -> str: ...
    def _print_BitwiseFn_bitwise_and(self, expr: sympy.Expr) -> str: ...
    def _print_BitwiseFn_bitwise_or(self, expr: sympy.Expr) -> str: ...
    def _print_Mod(self, expr: sympy.Expr) -> str: ...
    def _print_FloatTrueDiv(self, expr: sympy.Expr) -> str: ...
    def _print_CleanDiv(self, expr: sympy.Expr) -> str: ...
    def _print_Identity(self, expr: sympy.Expr) -> str: ...
    def _print_Float(self, expr: sympy.Expr) -> str: ...
    def _print_Pow(self, expr: sympy.Expr) -> str: ...
    def _print_ToFloat(self, expr: sympy.Expr) -> str: ...
    def _print_Infinity(self, expr: sympy.Expr) -> str: ...
    def _print_NegativeInfinity(self, expr: sympy.Expr) -> str: ...
    def _print_FloorDiv(self, expr: sympy.Expr) -> str: ...
    def _print_PythonMod(self, expr: sympy.Expr) -> str: ...
    def _print_IntTrueDiv(self, expr: sympy.Expr) -> str: ...
    def _print_PowByNatural(self, expr: sympy.Expr) -> str: ...
    def _print_FloatPow(self, expr: sympy.Expr) -> str: ...
    def _print_TruncToInt(self, expr: sympy.Expr) -> str: ...
    def _print_RoundToInt(self, expr: sympy.Expr) -> str: ...
    def _print_RoundDecimal(self, expr: sympy.Expr) -> str: ...
    def _print_TruncToFloat(self, expr: sympy.Expr) -> str: ...

class PythonPrinter(ExprPrinter):
    def _print_ToFloat(self, expr: sympy.Expr) -> str: ...
    def _print_And(self, expr: sympy.Expr) -> str: ...
    def _print_Or(self, expr: sympy.Expr) -> str: ...
    def _print_ModularIndexing(self, expr: sympy.Expr) -> str: ...
    def _print_Infinity(self, expr: sympy.Expr) -> str: ...
    def _print_NegativeInfinity(self, expr: sympy.Expr) -> str: ...
    def _print_PythonMod(self, expr: sympy.Expr) -> str: ...
    def _print_FloorDiv(self, expr: sympy.Expr) -> str: ...
    def _print_IntTrueDiv(self, expr: sympy.Expr) -> str: ...
    def _helper_sqrt(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_sqrt(self, expr: sympy.Expr) -> str: ...
    def _print_FloatPow(self, expr: sympy.Expr) -> str: ...
    def _print_PowByNatural(self, expr: sympy.Expr) -> str: ...
    def _print_floor(self, expr: sympy.Expr) -> str: ...
    def _print_FloorToInt(self, expr: sympy.Expr) -> str: ...
    def _print_TruncToInt(self, expr: sympy.Expr) -> str: ...
    def _print_ceiling(self, expr: sympy.Expr) -> str: ...
    def _print_CeilToInt(self, expr: sympy.Expr) -> str: ...
    def _print_Abs(self, expr: sympy.Expr) -> str: ...
    def _print_Max(self, expr: sympy.Expr) -> str: ...
    def _print_Min(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_cos(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_cosh(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_acos(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_sin(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_sinh(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_asin(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_tan(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_tanh(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_atan(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_log2(self, expr: sympy.Expr) -> str: ...
    def _print_RoundToInt(self, expr: sympy.Expr) -> str: ...
    def _print_RoundDecimal(self, expr: sympy.Expr) -> str: ...

class CppPrinter(ExprPrinter):
    def _print_Integer(self, expr: sympy.Expr) -> str: ...
    def _print_Where(self, expr: sympy.Expr) -> str: ...
    def _print_ModularIndexing(self, expr: sympy.Expr) -> str: ...
    def _print_FloorDiv(self, expr: sympy.Expr) -> str: ...
    def _print_floor(self, expr: sympy.Expr) -> str: ...
    def _print_FloorToInt(self, expr: sympy.Expr) -> str: ...
    def _print_TruncToInt(self, expr: sympy.Expr) -> str: ...
    def _print_TruncToFloat(self, expr: sympy.Expr) -> str: ...
    def _print_ToFloat(self, expr: sympy.Expr) -> str: ...
    def _print_PythonMod(self, expr: sympy.Expr) -> str: ...
    def _print_IntTrueDiv(self, expr: sympy.Expr) -> str: ...
    def _print_PowByNatural(self, expr: sympy.Expr) -> str: ...
    def _print_FloatPow(self, expr: sympy.Expr) -> str: ...
    def _print_Pow(self, expr: sympy.Expr) -> str: ...
    def _print_Rational(self, expr: sympy.Expr) -> str: ...
    def _print_ceiling(self, expr: sympy.Expr) -> str: ...
    def _print_CeilToInt(self, expr: sympy.Expr) -> str: ...
    def _print_Min(self, expr: sympy.Expr) -> str: ...
    def _print_Max(self, expr: sympy.Expr) -> str: ...
    def _print_Abs(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_cos(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_cosh(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_acos(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_sin(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_sinh(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_asin(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_tan(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_tanh(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_atan(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_sqrt(self, expr: sympy.Expr) -> str: ...
    def _print_OpaqueUnaryFn_log2(self, expr: sympy.Expr) -> str: ...
    def _print_RoundToInt(self, expr: sympy.Expr) -> str: ...
    def _print_RoundDecimal(self, expr: sympy.Expr) -> str: ...
    def _print_BooleanTrue(self, expr: sympy.Expr) -> str: ...
    def _print_BooleanFalse(self, expr: sympy.Expr) -> str: ...
    def _print_Infinity(self, expr: sympy.Expr) -> str: ...
    def _print_NegativeInfinity(self, expr: sympy.Expr) -> str: ...
