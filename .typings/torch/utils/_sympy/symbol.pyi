import sympy
from _typeshed import Incomplete
from collections.abc import Iterable
from enum import Enum

class SymT(Enum):
    SIZE = ...
    FLOAT = ...
    UNBACKED_INT = ...
    UNBACKED_FLOAT = ...
    TMP = ...
    INDIRECT = ...
    PRECOMPUTED_SIZE = ...
    INDEX = ...
    R0_INDEX = ...
    R1_INDEX = ...
    TEMPLATE_INDEX = ...
    XBLOCK = ...
    YBLOCK = ...
    ZBLOCK = ...
    VIEW = ...
    HALIDE = ...

prefix_str: Incomplete

def make_symbol(prefix: SymT, idx: int, **kwargs) -> sympy.Symbol: ...
def symbol_is_type(sym: sympy.Basic, prefix: SymT | Iterable[SymT]) -> bool: ...
def free_symbol_is_type(e: sympy.Expr, prefix: SymT | Iterable[SymT]) -> bool: ...
