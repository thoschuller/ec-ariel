from _typeshed import Incomplete
from torch.utils.data.datapipes.datapipe import DFIterDataPipe, IterDataPipe

__all__ = ['ConcatDataFramesPipe', 'DataFramesAsTuplesPipe', 'ExampleAggregateAsDataFrames', 'FilterDataFramesPipe', 'PerRowDataFramesPipe', 'ShuffleDataFramesPipe']

class DataFramesAsTuplesPipe(IterDataPipe):
    source_datapipe: Incomplete
    def __init__(self, source_datapipe) -> None: ...
    def __iter__(self): ...

class PerRowDataFramesPipe(DFIterDataPipe):
    source_datapipe: Incomplete
    def __init__(self, source_datapipe) -> None: ...
    def __iter__(self): ...

class ConcatDataFramesPipe(DFIterDataPipe):
    source_datapipe: Incomplete
    n_batch: Incomplete
    def __init__(self, source_datapipe, batch: int = 3) -> None: ...
    def __iter__(self): ...

class ShuffleDataFramesPipe(DFIterDataPipe):
    source_datapipe: Incomplete
    def __init__(self, source_datapipe) -> None: ...
    def __iter__(self): ...

class FilterDataFramesPipe(DFIterDataPipe):
    source_datapipe: Incomplete
    filter_fn: Incomplete
    def __init__(self, source_datapipe, filter_fn) -> None: ...
    def __iter__(self): ...

class ExampleAggregateAsDataFrames(DFIterDataPipe):
    source_datapipe: Incomplete
    columns: Incomplete
    dataframe_size: Incomplete
    def __init__(self, source_datapipe, dataframe_size: int = 10, columns=None) -> None: ...
    def _as_list(self, item): ...
    def __iter__(self): ...
