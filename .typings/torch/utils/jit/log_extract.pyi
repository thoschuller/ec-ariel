import torch
from collections.abc import Generator
from contextlib import contextmanager
from torch.utils.benchmark import Timer as Timer
from typing import Any

def extract_ir(filename: str) -> list[str]: ...
def make_tensor_from_type(inp_type: torch._C.TensorType): ...
def load_graph_and_inputs(ir: str) -> tuple[Any, list[Any]]: ...
def time_cuda(fn, inputs, test_runs): ...
def time_cpu(fn, inputs, test_runs): ...
def run_test(ir, inputs, *, warmup_runs: int = 10, test_runs: int = 20) -> float: ...
@contextmanager
def no_fuser(*args, **kwargs) -> Generator[None]: ...
def run_baseline_no_fusion(ir, inputs) -> float: ...
def run_nnc(ir, inputs, dynamic) -> float: ...
def run_nvfuser(ir, inputs) -> float: ...
