import onnxscript
from _typeshed import Incomplete
from onnxscript import ir

class SymbolicTensor(ir.Value):
    """A subclass of ir.Value that supports Python operators."""
    _opset: Incomplete
    def __init__(self, opset: onnxscript.values.Opset, name: str | None = None, shape: ir.Shape | None = None, type: ir.TypeProtocol | None = None, doc_string: str | None = None, const_value: ir.TensorProtocol | None = None) -> None: ...
    @property
    def rank(self) -> int | None: ...
    def __mod__(self, other): ...
    def __ne__(self, other): ...
    def __neg__(self): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __rand__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __matmul__(self, other): ...
    def __pow__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __truediv__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __ge__(self, other): ...
    def __gt__(self, other): ...
