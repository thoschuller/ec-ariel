from _typeshed import Incomplete
from torch.onnx import _type_utils as _type_utils, errors as errors, symbolic_helper as symbolic_helper
from torch.onnx._internal import jit_utils as jit_utils, registration as registration

_onnx_symbolic: Incomplete
block_listed_operators: Incomplete

def _interpolate(name, dim, interpolate_mode): ...
def __interpolate(g: jit_utils.GraphContext, input, size, scale_factor, mode, align_corners, recompute_scale_factor, antialias): ...
def _try_cast_integer_to_float(g: jit_utils.GraphContext, *args): ...
def _cast_to_type(g: jit_utils.GraphContext, input, to_type): ...
def _comparison_operator(g: jit_utils.GraphContext, input, other, op_name): ...
def gt(g: jit_utils.GraphContext, input, other): ...
def lt(g: jit_utils.GraphContext, input, other): ...
def bmm(g: jit_utils.GraphContext, self, other): ...
def matmul(g: jit_utils.GraphContext, self, other): ...
def prelu(g: jit_utils.GraphContext, self, weight): ...
def mm(g: jit_utils.GraphContext, self, other): ...
def addmm(g: jit_utils.GraphContext, self, mat1, mat2, beta, alpha): ...
def flatten(g: jit_utils.GraphContext, input, start_dim, end_dim): ...
def _constant_fill(g: jit_utils.GraphContext, sizes, dtype: int, const_value): ...
def empty(g: jit_utils.GraphContext, sizes, dtype, layout, device, pin_memory: bool = False, memory_format=None): ...
def empty_like(g: jit_utils.GraphContext, input, dtype, layout, device, pin_memory: bool = False, memory_format=None): ...
def zeros(g: jit_utils.GraphContext, sizes, dtype, layout, device, pin_memory: bool = False): ...
def zeros_like(g: jit_utils.GraphContext, input, dtype, layout, device, pin_memory: bool = False, memory_format=None): ...
def ones(g: jit_utils.GraphContext, sizes, dtype, layout, device, pin_memory: bool = False): ...
def ones_like(g: jit_utils.GraphContext, input, dtype, layout, device, pin_memory: bool = False, memory_format=None): ...
def full(g: jit_utils.GraphContext, sizes, value, dtype, layout, device, pin_memory: bool = False): ...
def full_like(g: jit_utils.GraphContext, input, fill_value, dtype, layout, device, pin_memory: bool = False, memory_format=None): ...
def repeat(g: jit_utils.GraphContext, self, repeats): ...
